AUTORES:
	Diego Suarez Ramos : diego.suarez.ramos@udc.es
	Ander Varela Martin : ander.varela@udc.es
	Brais Rodruiguez Gonzalez : brais.rodriguez.gonzalez@udc.es

//INTRODUCCIÓN -------------------------------------------

Todas las unidades de tiempo tratadas a continuación están in microsegundos us(10⁻⁶) y las n hacen referencia al
número de elementos del vector.



ORDENADOR UTILIZADO PARA LAS PRUEBAS:

Arquitectura:                        x86_64
modo(s) de operación de las CPUs:    32-bit, 64-bit
Orden de los bytes:                  Little Endian
Address sizes:                       39 bits physical, 48 bits virtual
CPU(s):                              12
Lista de la(s) CPU(s) en línea:      0-11
Hilo(s) de procesamiento por núcleo: 2
Núcleo(s) por «socket»:              6
«Socket(s)»                          1
Modo(s) NUMA:                        1
ID de fabricante:                    GenuineIntel
Familia de CPU:                      6
Modelo:                              158
Nombre del modelo:                   Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz
Revisión:                            13
CPU MHz:                             2600.000
CPU MHz máx.:                        4500,0000
CPU MHz mín.:                        800,0000
BogoMIPS:                            5199.98
Virtualización:                      VT-x
Caché L1d:                           192 KiB
Caché L1i:                           192 KiB
Caché L2:                            1,5 MiB
Caché L3:                            12 MiB
CPU(s) del nodo NUMA 0:              0-11
RAM: 				     16 GB

ORDENACIÓN POR INSERCIÓN:

//INTRODUCCIÓN DE LA ORDENACIÓN POR INSERCIÓN---------------------------------------------


Ordenacion por inserccion con inicialización ascendente
	             n          t(n)       t(n)/n^0.81      t(n)/n^1.01      t(n)/n^1.21
	(*)         500          1.421       0.009256       0.002671       0.000771
	(*)        1000          2.739       0.010176       0.002556       0.000642
	(*)        2000          5.444       0.011537       0.002523       0.000552
	(*)        4000         11.970       0.014469       0.002754       0.000524		
	(*)        8000         22.019       0.015181       0.002516       0.000417
	(*)       16000         44.696       0.017576       0.002536       0.000366
	(*)       32000         89.500       0.020075       0.002521       0.000317
	(*)       64000        177.987       0.022771       0.002490       0.000272

(*): Tiempo promedio de 1000 ejecuciones del algoritmo, se usa cuendo se obtiene un tiempo de ejecución inferior a 500µs.

Tras el estudio del algoritmo de ordenación por inserción con un vector ordenado de forma ascendente obtenemos que su 
complejidad es t(n) = O(n^(1.01)) debido a:

	-	n^(0.81) corresponde a una cota ligeramente subestimada debido a que cuando n tiende a infinito, el valor de la 
		función también tiende a infinito.

	-	n^(1.01) corresponde con la cota ajustada. Con el vector inicializado de forma ascendente tiende a 0.00257 por
		iteración.

	-	n^(1.21) corresponde a una cota ligeramente sobreestimada debido a que cuando n tiende a infinito, el valor de la
		función tiende a 0.

//CONCLUSIÓN de inicialización ascendente-------------------------------------------------



Ordenacion por inserccion con inicialización descendente
	             n          t(n)       t(n)/n^1.80      t(n)/n^2.00      t(n)/n^2.20
	(*)         500        253.875       0.003519       0.001015       0.000293
	           1000       1047.000       0.004168       0.001047       0.000263
	           2000       4066.000       0.004649       0.001017       0.000222
	           4000      17056.000       0.005600       0.001066       0.000203
	           8000      64577.000       0.006089       0.001009       0.000167
	          16000     258362.000       0.006995       0.001009       0.000146
	          32000    1024439.000       0.007966       0.001000       0.000126
	          64000    4100006.000       0.009155       0.001001       0.000109

(*): Tiempo promedio de 1000 ejecuciones del algoritmo, se usa cuendo se obtiene un tiempo de ejecución inferior a 500µs.

Tras el estudio del algoritmo de ordenación por inserción con un vector ordenado de forma descendente obtenemos que su 
complejidad es t(n) = O(n²) debido a:

	-	n^(1.80) corresponde a una cota ligeramente subestimada debido a que cuando n tiende a infinito, el valor de la 
		función también tiende a infinito.

	-	n² corresponde con la cota ajustada. Con el vector inicializado de forma ascendente tiende a 0.0010205 por
		iteración.

	-	n^(2.20) corresponde a una cota ligeramente sobreestimada debido a que cuando n tiende a infinito, el valor de la
		función tiende a 0.

//CONCLUSIÓN de inicialización descendente-------------------------------------------------



Ordenacion por inserccion con inicialización aleatorio
	             n          t(n)       t(n)/n^1.79      t(n)/n^1.99      t(n)/n^2.19
	(*)         500        131.731       0.001943       0.000561       0.000162
	           1000        541.000       0.002308       0.000580       0.000146
	           2000       2074.000       0.002558       0.000559       0.000122
	           4000       8055.000       0.002873       0.000547       0.000104
	           8000      33275.000       0.003432       0.000569       0.000094
	          16000     128471.000       0.003832       0.000553       0.000080
	          32000     524257.000       0.004522       0.000568       0.000071
	          64000    2047804.000       0.005108       0.000558       0.000061

(*): Tiempo promedio de 1000 ejecuciones del algoritmo, se usa cuendo se obtiene un tiempo de ejecución inferior a 500µs.

Tras el estudio del algoritmo de ordenación por inserción con un vector ordenado de forma descendente obtenemos que su 
complejidad es t(n) = O(n^1.99) debido a:

	-	n^(1.79) corresponde a una cota ligeramente subestimada debido a que cuando n tiende a infinito, el valor de la 
		función también tiende a infinito.

	-	n^(1.99) corresponde con la cota ajustada. Con el vector inicializado de forma ascendente tiende a 0.0010205 por
		iteración.

	-	n^(2.19) corresponde a una cota ligeramente sobreestimada debido a que cuando n tiende a infinito, el valor de la
		función tiende a 0.

//CONCLUSIÓN de inicialización desordenada (aleatorio)





ORDENACIÓN RÁPIDA:

//INTRODUCCIÓN DEL ALGORITMO DE ORDENACIÓN RÁPIDA

Ordenacion rapida con inicialización ascendente (Umbral = 1)
	             n          t(n)       t(n)/n^0.90      t(n)/n^1.10      t(n)/n^1.30
	(*)         500         11.081       0.041258       0.011905       0.003435
	(*)        1000         24.360       0.048605       0.012209       0.003067
	(*)        2000         50.281       0.053762       0.011756       0.002571
	(*)        4000        109.460       0.062719       0.011940       0.002273
	(*)        8000        231.084       0.070956       0.011759       0.001949
	          16000        502.000       0.082603       0.011917       0.001719
	          32000       1013.000       0.089325       0.011219       0.001409
	          64000       2117.000       0.100037       0.010938       0.001196


Ordenacion rapida con inicialización ascendente (Umbral = 10)
	             n          t(n)       t(n)/n^0.92      t(n)/n^1.12      t(n)/n^1.32
	(*)         500          7.444       0.024477       0.007063       0.002038
	(*)        1000         16.577       0.028808       0.007236       0.001818
	(*)        2000         38.684       0.035529       0.007769       0.001699
	(*)        4000         82.864       0.040223       0.007657       0.001458
	(*)        8000        178.637       0.045828       0.007595       0.001259
	(*)       16000        385.652       0.052288       0.007544       0.001088
	          32000        830.000       0.059476       0.007470       0.000938
	          64000       1752.000       0.066351       0.007255       0.000793

Ordenacion rapida con inicialización ascendente (Umbral = 100)
	             n          t(n)       t(n)/n^0.98      t(n)/n^1.18      t(n)/n^1.38
	(*)         500          4.489       0.010166       0.002933       0.000846
	(*)        1000         11.779       0.013524       0.003397       0.000853
	(*)        2000         26.970       0.015699       0.003433       0.000751
	(*)        4000         59.758       0.017635       0.003357       0.000639
	(*)        8000        132.745       0.019861       0.003291       0.000545
	(*)       16000        294.948       0.022372       0.003228       0.000466
	          32000        708.000       0.027226       0.003419       0.000429
	          64000       1506.000       0.029361       0.003210       0.000351


//CONCLUSIÓN ORDENACIÓN RÁPIDA ascendente ---------------------------------------------





Ordenacion rapida con inicialización descendente (Umbral = 1)
	             n          t(n)       t(n)/n^0.91      t(n)/n^1.11      t(n)/n^1.31
	(*)         500         10.933       0.038254       0.011038       0.003185
	(*)        1000         24.449       0.045526       0.011436       0.002873
	(*)        2000         51.303       0.050840       0.011117       0.002431
	(*)        4000        110.849       0.058460       0.011129       0.002119
	(*)        8000        233.453       0.065522       0.010858       0.001799
	          16000        522.000       0.077969       0.011249       0.001623
	          32000       1055.000       0.083862       0.010533       0.001323
	          64000       2191.000       0.092687       0.010134       0.001108


Ordenacion rapida con inicialización descendente (Umbral = 10)
	             n          t(n)       t(n)/n^0.94      t(n)/n^1.14      t(n)/n^1.34
	(*)         500          7.597       0.022060       0.006365       0.001837
	(*)        1000         18.227       0.027588       0.006930       0.001741
	(*)        2000         39.632       0.031266       0.006837       0.001495
	(*)        4000         87.041       0.035792       0.006814       0.001297
	(*)        8000        186.569       0.039988       0.006627       0.001098
	(*)       16000        400.064       0.044695       0.006448       0.000930
	          32000        852.000       0.049613       0.006231       0.000783
	          64000       1826.000       0.055423       0.006060       0.000663


Ordenacion rapida con inicialización descendente (Umbral = 100)
	             n          t(n)       t(n)/n^0.97      t(n)/n^1.17      t(n)/n^1.37
	(*)         500          4.570       0.011013       0.003178       0.000917
	(*)        1000         12.022       0.014790       0.003715       0.000933
	(*)        2000         26.569       0.016687       0.003649       0.000798
	(*)        4000         60.349       0.019350       0.003683       0.000701
	(*)        8000        135.418       0.022166       0.003673       0.000609
	(*)       16000        293.853       0.024555       0.003543       0.000511
	          32000        643.000       0.027429       0.003445       0.000433
	          64000       1543.000       0.033602       0.003674       0.000402

//CONCLUSIÓN ORDENACIÓN RÁPIDA descendente --------------------------------------------




Ordenacion rapida con inicialización aleatorio (Umbral = 1)
	             n          t(n)       t(n)/n^0.90      t(n)/n^1.10      t(n)/n^1.30
	(*)         500         32.215       0.119946       0.034609       0.009986
	(*)        1000         69.581       0.138832       0.034873       0.008760
	(*)        2000        150.219       0.160619       0.035123       0.007680
	(*)        4000        326.916       0.187319       0.035659       0.006788
	           8000        677.000       0.207878       0.034450       0.005709
	          16000       1435.000       0.236126       0.034066       0.004915
	          32000       3098.000       0.273178       0.034310       0.004309
	          64000       6588.000       0.311309       0.034037       0.003722


Ordenacion rapida con inicialización aleatorio (Umbral = 10)
	             n          t(n)       t(n)/n^0.91      t(n)/n^1.11      t(n)/n^1.31
	(*)         500         33.609       0.117596       0.033931       0.009790
	(*)        1000         71.104       0.132402       0.033258       0.008354
	(*)        2000        154.392       0.152999       0.033457       0.007316
	(*)        4000        328.559       0.173276       0.032986       0.006279
	           8000        692.000       0.194220       0.032187       0.005334
	          16000       1449.000       0.216431       0.031224       0.004505
	          32000       3059.000       0.243160       0.030540       0.003836
	          64000       6986.000       0.295532       0.032312       0.003533


Ordenacion rapida con inicialización aleatorio (Umbral = 100)
	             n          t(n)       t(n)/n^0.91      t(n)/n^1.11      t(n)/n^1.31
	(*)         500         34.281       0.119947       0.034610       0.009986
	(*)        1000         71.449       0.133044       0.033419       0.008395
	(*)        2000        170.340       0.168803       0.036912       0.008072
	(*)        4000        356.325       0.187919       0.035773       0.006810
	           8000        734.000       0.206008       0.034140       0.005658
	          16000       1585.000       0.236745       0.034155       0.004928
	          32000       3640.000       0.289344       0.036340       0.004564
	          64000       7352.000       0.311015       0.034005       0.003718

//CONCLUSIÓN ORDENACIÓN RÁPIDA desordenada (aleatorio) --------------------------------



//CONCLUSIÓN FINAL DE LA PRÁCTICA
